{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","length","merge","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","WINDOW_WIDTH","window","innerWidth","WINDOW_HEIGHT","innerHeight","NUMBER_OF_ARRAY_BARS","parseInt","onresize","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","className","position","left","map","value","idx","key","top","onClick","id","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.03be1810.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  let animations = [];\r\n  let auxillaryArray = array.slice();\r\n  mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n  array = auxillaryArray;\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\r\n  if (startIndex === endIndex) return;\r\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSort(auxillaryArray, startIndex, middleIndex, animations);\r\n  mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\r\n  merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\r\n}\r\n\r\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\r\n  let sortArray = [];\r\n  let i = startIndex;\r\n  let j = middleIndex + 1;\r\n  while (i <= middleIndex && j <= endIndex) {\r\n    //Comparing value at ith and jth index so push them to change their color\r\n    animations.push([i, j]);\r\n    //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\r\n    animations.push([i, j]);\r\n    if (auxillaryArray[i] <= auxillaryArray[j]) {\r\n      //We should overwrite the value at (i+startIndex)th index with ith index so push them to highlight swap their heights\r\n      animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n      sortArray.push(auxillaryArray[i++]);\r\n    } else {\r\n      //We should overwrite the value at (i+startIndex)th index with jth index so push them to highlight swap their heights\r\n      animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n      sortArray.push(auxillaryArray[j++]);\r\n    }\r\n  }\r\n  while (i <= middleIndex) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([sortArray.length + startIndex, auxillaryArray[i]]);\r\n    sortArray.push(auxillaryArray[i++]);\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([sortArray.length + startIndex, auxillaryArray[j]]);\r\n    sortArray.push(auxillaryArray[j++]);\r\n  }\r\n  for (let i = startIndex; i <= endIndex; i++) {\r\n    auxillaryArray[i] = sortArray[i - startIndex];\r\n  }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n  if (firstArray.length !== secondArray.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < firstArray.length; i++) {\r\n    if (firstArray[i] !== secondArray[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/MergeSort\";\r\n//Changing width,height accordingly with the browser\r\nlet WINDOW_WIDTH = window.innerWidth;\r\nlet WINDOW_HEIGHT = window.innerHeight;\r\nlet NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 50);\r\n\r\nfunction reportWindowSize() {\r\n  WINDOW_WIDTH = window.innerWidth;\r\n  WINDOW_HEIGHT = window.innerHeight;\r\n  NUMBER_OF_ARRAY_BARS = parseInt((WINDOW_WIDTH - 200) / 50);\r\n}\r\nwindow.onresize = reportWindowSize; //TBD -> find a way to update state also when resized\r\n\r\nconst PRIMARY_COLOR = \"pink\"; //Normal color of bars\r\nconst SECONDARY_COLOR = \"brown\"; //Color of bars when they are being compared\r\nconst ANIMATION_SPEED_MS = 100; //Animation Speed (how fast color changes, how fast height gets overwritten)\r\n\r\n//Tooltips for buttons\r\nconst DISABLED_BUTTON = \"Currently Disabled\";\r\nconst ENABLED_BUTTON = {\r\n  nlogn: \"O(NlogN) Time Complexity\",\r\n  nSquare: \"O(N^2) Time Complexity\"\r\n};\r\n\r\nclass SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n  //Generates new random array\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30));\r\n    }\r\n    this.setState({ array: array });\r\n    this.restoreStoreButtons();\r\n  }\r\n  disableSortButtons() {\r\n    document.getElementById(\"mergeSort\").disabled = true;\r\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\r\n    buttonStyle.cursor = \"default\";\r\n    buttonStyle.background = \"#000000\";\r\n  }\r\n  restoreStoreButtons() {\r\n    document.getElementById(\"mergeSort\").disabled = false;\r\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n    document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\r\n    buttonStyle.background = \"#47535E\";\r\n    buttonStyle.cursor = \"pointer\";\r\n  }\r\n  //Sorting Algorithms\r\n  mergeSort() {\r\n    const [animations, sortArray] = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 3 !== 2;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    // this.setState({array: sortArray})\r\n    const RESTORE_TIME = parseInt(\r\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\r\n    );\r\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\r\n  }\r\n\r\n  render() {\r\n    const array = this.state.array;\r\n    const SORT_BUTTONS = 1;\r\n    const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"array-container\"\r\n          style={{ position: \"absolute\", left: `200px` }}\r\n        >\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <button\r\n            title=\"Generates a new random array\"\r\n            style={{\r\n              position: \"relative\",\r\n              top: `${(0 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`\r\n            }}\r\n            onClick={() => this.resetArray()}\r\n          >\r\n            Generate New Array\r\n          </button>\r\n          <button\r\n            title=\"O(NlogN) Time Complexity\"\r\n            id=\"mergeSort\"\r\n            style={{\r\n              position: \"relative\",\r\n              top: `${(0.5 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`\r\n            }}\r\n            onClick={() => this.mergeSort()}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <SortingVisualizer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}